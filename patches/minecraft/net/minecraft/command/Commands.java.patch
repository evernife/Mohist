--- a/net/minecraft/command/Commands.java
+++ b/net/minecraft/command/Commands.java
@@ -1,5 +1,6 @@
 package net.minecraft.command;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
@@ -11,6 +12,8 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import java.util.Collection;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
@@ -102,12 +105,15 @@
 import net.minecraft.util.text.event.HoverEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class Commands {
    private static final Logger field_197061_a = LogManager.getLogger();
    private final CommandDispatcher<CommandSource> field_197062_b = new CommandDispatcher<>();
 
    public Commands(Commands.EnvironmentType p_i232148_1_) {
+      this(); // CraftBukkit
       AdvancementCommand.func_198199_a(this.field_197062_b);
       AttributeCommand.func_241003_a_(this.field_197062_b);
       ExecuteCommand.func_198378_a(this.field_197062_b);
@@ -186,35 +192,81 @@
       if (p_i232148_1_.field_237219_d_) {
          PublishCommand.func_198581_a(this.field_197062_b);
       }
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.field_197062_b, p_i232148_1_);
 
       this.field_197062_b.findAmbiguities((p_201302_1_, p_201302_2_, p_201302_3_, p_201302_4_) -> {
-         field_197061_a.warn("Ambiguity between arguments {} and {} with inputs: {}", this.field_197062_b.getPath(p_201302_2_), this.field_197062_b.getPath(p_201302_3_), p_201302_4_);
+         //LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", this.dispatcher.getPath(p_201302_2_), this.dispatcher.getPath(p_201302_3_), p_201302_4_); // CraftBukkit
       });
+   }
+
+   // CraftBukkit start
+   public Commands() {
       this.field_197062_b.setConsumer((p_197058_0_, p_197058_1_, p_197058_2_) -> {
          p_197058_0_.getSource().func_197038_a(p_197058_0_, p_197058_1_, p_197058_2_);
       });
    }
 
+   public int dispatchServerCommand(CommandSource sender, String command) {
+      Joiner joiner = Joiner.on(" ");
+      if (command.startsWith("/")) {
+         command = command.substring(1);
+      }
+      ServerCommandEvent event = new ServerCommandEvent(sender.getBukkitSender(), command);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return 0;
+      }
+      command = event.getCommand();
+      String[] args = command.split(" ");
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+          || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+          || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         return 0;
+      }
+      // Handle vanilla commands;
+      if (sender.func_197023_e().getCBServer().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+      return this.func_197059_a(sender, joiner.join(args));
+   }
+
    public int func_197059_a(CommandSource p_197059_1_, String p_197059_2_) {
-      StringReader stringreader = new StringReader(p_197059_2_);
+      return this.handleCommand(p_197059_1_, p_197059_2_, p_197059_2_);
+   }
+
+   public int handleCommand(CommandSource source, String command, String label) {
+      // CraftBukkit end
+      StringReader stringreader = new StringReader(command);
       if (stringreader.canRead() && stringreader.peek() == '/') {
          stringreader.skip();
       }
 
-      p_197059_1_.func_197028_i().func_213185_aS().func_76320_a(p_197059_2_);
+      source.func_197028_i().func_213185_aS().func_76320_a(command);
 
       try {
          try {
-            return this.field_197062_b.execute(stringreader, p_197059_1_);
+            ParseResults<CommandSource> parse = this.field_197062_b.parse(stringreader, source);
+            net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(parse);
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+               if (event.getException() != null) {
+                  com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+               }
+               return 1;
+            }
+            return this.field_197062_b.execute(stringreader, source);
          } catch (CommandException commandexception) {
-            p_197059_1_.func_197021_a(commandexception.func_197003_a());
+            source.func_197021_a(commandexception.func_197003_a());
             return 0;
          } catch (CommandSyntaxException commandsyntaxexception) {
-            p_197059_1_.func_197021_a(TextComponentUtils.func_202465_a(commandsyntaxexception.getRawMessage()));
+            source.func_197021_a(TextComponentUtils.func_202465_a(commandsyntaxexception.getRawMessage()));
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                IFormattableTextComponent iformattabletextcomponent1 = (new StringTextComponent("")).func_240699_a_(TextFormatting.GRAY).func_240700_a_((p_211705_1_) -> {
-                  return p_211705_1_.func_240715_a_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_197059_2_));
+                  return p_211705_1_.func_240715_a_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, label));
                });
                if (j > 10) {
                   iformattabletextcomponent1.func_240702_b_("...");
@@ -227,12 +279,12 @@
                }
 
                iformattabletextcomponent1.func_230529_a_((new TranslationTextComponent("command.context.here")).func_240701_a_(new TextFormatting[]{TextFormatting.RED, TextFormatting.ITALIC}));
-               p_197059_1_.func_197021_a(iformattabletextcomponent1);
+               source.func_197021_a(iformattabletextcomponent1);
             }
          } catch (Exception exception) {
             IFormattableTextComponent iformattabletextcomponent = new StringTextComponent(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
             if (field_197061_a.isDebugEnabled()) {
-               field_197061_a.error("Command exception: {}", p_197059_2_, exception);
+               field_197061_a.error("Command exception: {}", command, exception);
                StackTraceElement[] astacktraceelement = exception.getStackTrace();
 
                for(int i = 0; i < Math.min(astacktraceelement.length, 3); ++i) {
@@ -240,12 +292,12 @@
                }
             }
 
-            p_197059_1_.func_197021_a((new TranslationTextComponent("command.failed")).func_240700_a_((p_211704_1_) -> {
+            source.func_197021_a((new TranslationTextComponent("command.failed")).func_240700_a_((p_211704_1_) -> {
                return p_211704_1_.func_240716_a_(new HoverEvent(HoverEvent.Action.field_230550_a_, iformattabletextcomponent));
             }));
             if (SharedConstants.field_206244_b) {
-               p_197059_1_.func_197021_a(new StringTextComponent(Util.func_229758_d_(exception)));
-               field_197061_a.error("'" + p_197059_2_ + "' threw an exception", (Throwable)exception);
+               source.func_197021_a(new StringTextComponent(Util.func_229758_d_(exception)));
+               field_197061_a.error("'" + command + "' threw an exception", (Throwable)exception);
             }
 
             return 0;
@@ -253,15 +305,37 @@
 
          return 0;
       } finally {
-         p_197059_1_.func_197028_i().func_213185_aS().func_76319_b();
+         source.func_197028_i().func_213185_aS().func_76319_b();
       }
    }
 
    public void func_197051_a(ServerPlayerEntity p_197051_1_) {
-      Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newHashMap();
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+      RootCommandNode vanillaRoot = new RootCommandNode();
+      RootCommandNode<CommandSource> vanilla = p_197051_1_.field_71133_b.vanillaCommandDispatcher.func_197054_a().getRoot();
+      map.put(vanilla, vanillaRoot);
+      this.func_197052_a(vanilla, vanillaRoot, p_197051_1_.func_195051_bN(), (Map) map);
+      // Now build the global commands in a second pass
       RootCommandNode<ISuggestionProvider> rootcommandnode = new RootCommandNode<>();
       map.put(this.field_197062_b.getRoot(), rootcommandnode);
       this.func_197052_a(this.field_197062_b.getRoot(), rootcommandnode, p_197051_1_.func_195051_bN(), map);
+
+      Collection<String> bukkit = new LinkedHashSet<>();
+      for (CommandNode node : rootcommandnode.getChildren()) {
+         bukkit.add(node.getName());
+      }
+      PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_197051_1_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+      // Remove labels that were removed during the event
+      for (String orig : bukkit) {
+         if (!event.getCommands().contains(orig)) {
+            rootcommandnode.removeCommand(orig);
+         }
+      }
+      // CraftBukkit end
+
       p_197051_1_.field_71135_a.func_147359_a(new SCommandListPacket(rootcommandnode));
    }
 
