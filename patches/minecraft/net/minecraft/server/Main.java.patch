--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -41,6 +41,8 @@
 import net.minecraft.util.registry.DynamicRegistries;
 import net.minecraft.util.registry.WorldSettingsImport;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.world.Dimension;
+import net.minecraft.world.DimensionType;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
@@ -72,6 +74,8 @@
       OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec13 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
 
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
@@ -79,33 +83,38 @@
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         ServerEula servereula = new ServerEula(path1);
 
+         if (!servereula.func_154346_a()) {
+            field_240759_a_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
+
          CrashReport.func_230188_h_();
          Bootstrap.func_151354_b();
          Bootstrap.func_218821_c();
          Util.func_240994_l_();
+         if (!optionset.has(optionspec1)) net.minecraftforge.fml.server.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
          DynamicRegistries.Impl dynamicregistries$impl = DynamicRegistries.func_239770_b_();
          Path path = Paths.get("server.properties");
          ServerPropertiesProvider serverpropertiesprovider = new ServerPropertiesProvider(dynamicregistries$impl, path);
          serverpropertiesprovider.func_219035_b();
-         Path path1 = Paths.get("eula.txt");
-         ServerEula servereula = new ServerEula(path1);
          if (optionset.has(optionspec1)) {
             field_240759_a_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
             return;
          }
 
-         if (!servereula.func_154346_a()) {
-            field_240759_a_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
          File file1 = new File(optionset.valueOf(optionspec9));
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(file1, MinecraftServer.field_152367_a.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(serverpropertiesprovider.func_219034_a().field_219021_o);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            field_240759_a_.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          SaveFormat saveformat = SaveFormat.func_237269_a_(file1.toPath());
          SaveFormat.LevelSave saveformat$levelsave = saveformat.func_237274_c_(s);
          MinecraftServer.func_240777_a_(saveformat$levelsave);
@@ -146,30 +155,28 @@
             iserverconfiguration = new ServerWorldInfo(worldsettings, dimensiongeneratorsettings, Lifecycle.stable());
          }
 
-         if (optionset.has(optionspec4)) {
-            func_240761_a_(saveformat$levelsave, DataFixesManager.func_210901_a(), optionset.has(optionspec5), () -> {
-               return true;
-            }, iserverconfiguration.func_230418_z_().func_236226_g_());
-         }
-
          saveformat$levelsave.func_237287_a_(dynamicregistries$impl, iserverconfiguration);
+         /*
          IServerConfiguration iserverconfiguration1 = iserverconfiguration;
          final DedicatedServer dedicatedserver = MinecraftServer.func_240784_a_((p_240762_16_) -> {
-            DedicatedServer dedicatedserver1 = new DedicatedServer(p_240762_16_, dynamicregistries$impl, saveformat$levelsave, resourcepacklist, datapackregistries, iserverconfiguration1, serverpropertiesprovider, DataFixesManager.func_210901_a(), minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new);
-            dedicatedserver1.func_71224_l(optionset.valueOf(optionspec8));
-            dedicatedserver1.func_71208_b(optionset.valueOf(optionspec11));
-            dedicatedserver1.func_71204_b(optionset.has(optionspec2));
-            dedicatedserver1.func_213208_c(optionset.valueOf(optionspec12));
+            DedicatedServer dedicatedserver1 = new DedicatedServer(p_240762_16_, dynamicregistries$impl, saveformat$levelsave, resourcepacklist, datapackregistries, iserverconfiguration1, serverpropertiesprovider, DataFixesManager.getDataFixer(), minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new);
+            dedicatedserver1.setServerOwner(optionset.valueOf(optionspec8));
+            dedicatedserver1.setServerPort(optionset.valueOf(optionspec11));
+            dedicatedserver1.setDemo(optionset.has(optionspec2));
+            dedicatedserver1.setServerId(optionset.valueOf(optionspec12));
             boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec13).contains("nogui");
             if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.func_120011_ar();
+               dedicatedserver1.setGuiEnabled();
             }
 
             return dedicatedserver1;
          });
+
+          */
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
-               dedicatedserver.func_71263_m(true);
+//               dedicatedserver.initiateShutdown(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(field_240759_a_));
@@ -180,7 +187,7 @@
 
    }
 
-   private static void func_240761_a_(SaveFormat.LevelSave p_240761_0_, DataFixer p_240761_1_, boolean p_240761_2_, BooleanSupplier p_240761_3_, ImmutableSet<RegistryKey<World>> p_240761_4_) {
+   public static void func_240761_a_(SaveFormat.LevelSave p_240761_0_, DataFixer p_240761_1_, boolean p_240761_2_, BooleanSupplier p_240761_3_, ImmutableSet<RegistryKey<World>> p_240761_4_) { // private->public CraftBukkit
       field_240759_a_.info("Forcing world upgrade!");
       WorldOptimizer worldoptimizer = new WorldOptimizer(p_240761_0_, p_240761_1_, p_240761_4_, p_240761_2_);
       ITextComponent itextcomponent = null;
