--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -9,6 +10,8 @@
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.Lifecycle;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -37,12 +40,12 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
-import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicReference;
@@ -50,6 +53,8 @@
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.block.Block;
@@ -65,6 +70,8 @@
 import net.minecraft.item.crafting.RecipeManager;
 import net.minecraft.loot.LootPredicateManager;
 import net.minecraft.loot.LootTableManager;
+import net.minecraft.nbt.INBT;
+import net.minecraft.nbt.NBTDynamicOps;
 import net.minecraft.network.NetworkSystem;
 import net.minecraft.network.ServerStatusResponse;
 import net.minecraft.network.play.server.SServerDifficultyPacket;
@@ -81,6 +88,8 @@
 import net.minecraft.resources.ResourcePackList;
 import net.minecraft.scoreboard.ScoreboardSaveData;
 import net.minecraft.scoreboard.ServerScoreboard;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.ServerProperties;
 import net.minecraft.server.management.OpEntry;
 import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
@@ -97,6 +106,7 @@
 import net.minecraft.util.Util;
 import net.minecraft.util.concurrent.RecursiveEventLoop;
 import net.minecraft.util.concurrent.TickDelayedTask;
+import net.minecraft.util.datafix.DataFixesManager;
 import net.minecraft.util.datafix.codec.DatapackCodec;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -106,6 +116,7 @@
 import net.minecraft.util.registry.DynamicRegistries;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.util.registry.SimpleRegistry;
+import net.minecraft.util.registry.WorldSettingsImport;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
@@ -120,7 +131,6 @@
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.biome.BiomeManager;
 import net.minecraft.world.biome.provider.BiomeProvider;
-import net.minecraft.world.border.IBorderListener;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.listener.IChunkStatusListener;
 import net.minecraft.world.chunk.listener.IChunkStatusListenerFactory;
@@ -138,7 +148,6 @@
 import net.minecraft.world.spawner.PhantomSpawner;
 import net.minecraft.world.spawner.WanderingTraderSpawner;
 import net.minecraft.world.storage.CommandStorage;
-import net.minecraft.world.storage.DerivedWorldInfo;
 import net.minecraft.world.storage.DimensionSavedDataManager;
 import net.minecraft.world.storage.FolderName;
 import net.minecraft.world.storage.IServerConfiguration;
@@ -146,32 +155,38 @@
 import net.minecraft.world.storage.IWorldInfo;
 import net.minecraft.world.storage.PlayerData;
 import net.minecraft.world.storage.SaveFormat;
+import net.minecraft.world.storage.ServerWorldInfo;
 import net.minecraft.world.storage.WorldSavedDataCallableSave;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.event.server.ServerLoadEvent;
 
 public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask> implements ISnooperInfo, ICommandSource, AutoCloseable {
-   private static final Logger field_147145_h = LogManager.getLogger();
+   public static final Logger field_147145_h = LogManager.getLogger(); // private->public CraftBukkit
    public static final File field_152367_a = new File("usercache.json");
    public static final WorldSettings field_213219_c = new WorldSettings("Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DatapackCodec.field_234880_a_);
-   protected final SaveFormat.LevelSave field_71310_m;
-   protected final PlayerData field_240766_e_;
+   public final SaveFormat.LevelSave field_71310_m;// protected->public CraftBukkit
+   public final PlayerData field_240766_e_; // protected->public CraftBukkit
    private final Snooper field_71307_n = new Snooper("server", this, Util.func_211177_b());
    private final List<Runnable> field_71322_p = Lists.newArrayList();
    private final TimeTracker field_240769_m_ = new TimeTracker(Util.field_211180_a, this::func_71259_af);
    private IProfiler field_71304_b = EmptyProfiler.field_219906_a;
    private final NetworkSystem field_147144_o;
-   private final IChunkStatusListenerFactory field_213220_d;
+   public final IChunkStatusListenerFactory field_213220_d; // private->public CraftBukkit
    private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
    private final Random field_147146_q = new Random();
-   private final DataFixer field_184112_s;
+   public final DataFixer field_184112_s; // private->public CraftBukkit
    private String field_71320_r;
    private int field_71319_s = -1;
-   protected final DynamicRegistries.Impl field_240767_f_;
-   private final Map<RegistryKey<World>, ServerWorld> field_71305_c = Maps.newLinkedHashMap();
+   public final DynamicRegistries.Impl field_240767_f_; // protected->public CraftBukkit
+   public final Map<RegistryKey<World>, ServerWorld> field_71305_c = Maps.newLinkedHashMap(); // private->public CraftBukkit
    private PlayerList field_71318_t;
    private volatile boolean field_71317_u = true;
    private boolean field_71316_v;
@@ -201,7 +216,7 @@
    private final GameProfileRepository field_152365_W;
    private final PlayerProfileCache field_152366_X;
    private long field_147142_T;
-   private final Thread field_175590_aa;
+   public final Thread field_175590_aa; // private->public CraftBukkit
    protected long field_211151_aa = Util.func_211177_b();
    private long field_213213_ab;
    private boolean field_213214_ac;
@@ -216,16 +231,31 @@
    private final FrameTimer field_213215_ap = new FrameTimer();
    private boolean field_205745_an;
    private float field_211152_ao;
-   private final Executor field_213217_au;
+   public final Executor field_213217_au; // private->public CraftBukkit
    @Nullable
    private String field_213218_av;
-   private DataPackRegistries field_195576_ac;
+   public DataPackRegistries field_195576_ac; // private->public CraftBukkit
    private final TemplateManager field_240765_ak_;
-   protected final IServerConfiguration field_240768_i_;
+   protected IServerConfiguration field_240768_i_;
 
+   // CraftBukkit start
+   public DatapackCodec datapackconfiguration;
+   public CraftServer server;
+   public OptionSet options;
+   public org.bukkit.command.ConsoleCommandSender console;
+   public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+   public ConsoleReader reader;
+   public static int currentTick = (int) (System.currentTimeMillis() / 50);
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public File bukkitDataPackFolder;
+   public Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+   // CraftBukkit end
+
    public static <S extends MinecraftServer> S func_240784_a_(Function<Thread, S> p_240784_0_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, () -> {
          atomicreference.get().func_240802_v_();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_240779_0_, p_240779_1_) -> {
@@ -237,7 +267,7 @@
       return s;
    }
 
-   public MinecraftServer(Thread p_i232576_1_, DynamicRegistries.Impl p_i232576_2_, SaveFormat.LevelSave p_i232576_3_, IServerConfiguration p_i232576_4_, ResourcePackList p_i232576_5_, Proxy p_i232576_6_, DataFixer p_i232576_7_, DataPackRegistries p_i232576_8_, MinecraftSessionService p_i232576_9_, GameProfileRepository p_i232576_10_, PlayerProfileCache p_i232576_11_, IChunkStatusListenerFactory p_i232576_12_) {
+   public MinecraftServer(OptionSet options, DatapackCodec datapackconfiguration, Thread p_i232576_1_, DynamicRegistries.Impl p_i232576_2_, SaveFormat.LevelSave p_i232576_3_, IServerConfiguration p_i232576_4_, ResourcePackList p_i232576_5_, Proxy p_i232576_6_, DataFixer p_i232576_7_, DataPackRegistries p_i232576_8_, MinecraftSessionService p_i232576_9_, GameProfileRepository p_i232576_10_, PlayerProfileCache p_i232576_11_, IChunkStatusListenerFactory p_i232576_12_) {
       super("Server");
       this.field_240767_f_ = p_i232576_2_;
       this.field_240768_i_ = p_i232576_4_;
@@ -256,7 +286,34 @@
       this.field_240765_ak_ = new TemplateManager(p_i232576_8_.func_240970_h_(), p_i232576_3_, p_i232576_7_);
       this.field_175590_aa = p_i232576_1_;
       this.field_213217_au = Util.func_215072_e();
+
+      // CraftBukkit start
+      this.options = options;
+      this.datapackconfiguration = datapackconfiguration;
+      this.vanillaCommandDispatcher = p_i232576_8_.field_240953_c_; // CraftBukkit
+      // Try to see if we're actually running in a terminal, disable jline if not
+      if (System.console() == null && System.getProperty("jline.terminal") == null) {
+         System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+         Main.useJline = false;
+      }
+      try {
+         reader = new ConsoleReader(System.in, System.out);
+         reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+      } catch (Throwable e) {
+         try {
+            // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            System.setProperty("user.language", "en");
+            Main.useJline = false;
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false);
+         } catch (IOException ex) {
+            field_147145_h.warn((String) null, ex);
+         }
+      }
+      Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
    }
+   // CraftBukkit end
 
    private void func_213204_a(DimensionSavedDataManager p_213204_1_) {
       ScoreboardSaveData scoreboardsavedata = p_213204_1_.func_215752_a(ScoreboardSaveData::new, "scoreboard");
@@ -268,7 +325,7 @@
 
    public static void func_240777_a_(SaveFormat.LevelSave p_240777_0_) {
       if (p_240777_0_.func_237295_c_()) {
-         field_147145_h.info("Converting map!");
+         field_147145_h.info("Converting map! {}", p_240777_0_.func_237282_a_()); // CraftBukkit
          p_240777_0_.func_237283_a_(new IProgressUpdate() {
             private long field_96245_b = Util.func_211177_b();
 
@@ -298,42 +355,171 @@
 
    }
 
-   protected void func_240800_l__() {
-      this.func_175584_a();
-      this.field_240768_i_.func_230412_a_(this.getServerModName(), this.func_230045_q_().isPresent());
-      IChunkStatusListener ichunkstatuslistener = this.field_213220_d.create(11);
-      this.func_240787_a_(ichunkstatuslistener);
+//   protected void func_240800_l__() {
+//      this.setResourcePackFromWorld();
+//      this.field_240768_i_.func_230412_a_(this.getServerModName(), this.func_230045_q_().isPresent());
+//      IChunkStatusListener ichunkstatuslistener = this.chunkStatusListenerFactory.create(11);
+////      this.func_240787_a_(ichunkstatuslistener); // TODO: 18/08/2020 Magma
+//      this.func_230543_p_();
+//      this.loadInitialChunks(ichunkstatuslistener, null);
+//   }
+
+   protected void loadWorld(String s) {
+      int worldCount = 3;
+      for (int worldId = 0; worldId < worldCount; ++worldId) {
+         ServerWorld world;
+         ServerWorldInfo worlddata;
+         byte dimension = 0;
+         RegistryKey<Dimension> dimensionKey = Dimension.field_236053_b_;
+         if (worldId == 1) {
+            if (func_71255_r()) {
+               dimension = -1;
+               dimensionKey =  Dimension.field_236054_c_;
+            } else {
+               continue;
+            }
+         }
+         if (worldId == 2) {
+            if (server.getAllowEnd()) {
+               dimension = 1;
+               dimensionKey =  Dimension.field_236055_d_;
+            } else {
+               continue;
+            }
+         }
+         String worldType = org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
+         String name = (dimension == 0) ? s : s + "_" + worldType;
+         SaveFormat.LevelSave worldSession;
+         if (dimension == 0) {
+            worldSession = this.field_71310_m;
+         } else {
+            String dim = "DIM" + dimension;
+            File newWorld = new File(new File(name), dim);
+            File oldWorld = new File(new File(s), dim);
+            File oldLevelDat = new File(new File(s), "level.dat"); // The data folders exist on first run as they are created in the PersistentCollection constructor above, but the level.dat won't
+            if (!newWorld.isDirectory() && oldWorld.isDirectory() && oldLevelDat.isFile()) {
+               MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder required ----");
+               MinecraftServer.field_147145_h.info("Unfortunately due to the way that Minecraft implemented multiworld support in 1.6, Bukkit requires that you move your " + worldType + " folder to a new location in order to operate correctly.");
+               MinecraftServer.field_147145_h.info("We will move this folder for you, but it will mean that you need to move it back should you wish to stop using Bukkit in the future.");
+               MinecraftServer.field_147145_h.info("Attempting to move " + oldWorld + " to " + newWorld + "...");
+               if (newWorld.exists()) {
+                  MinecraftServer.field_147145_h.warn("A file or folder already exists at " + newWorld + "!");
+                  MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder failed ----");
+               } else if (newWorld.getParentFile().mkdirs()) {
+                  if (oldWorld.renameTo(newWorld)) {
+                     MinecraftServer.field_147145_h.info("Success! To restore " + worldType + " in the future, simply move " + newWorld + " to " + oldWorld);
+                     // Migrate world data too.
+                     try {
+                        com.google.common.io.Files.copy(oldLevelDat, new File(new File(name), "level.dat"));
+                        org.apache.commons.io.FileUtils.copyDirectory(new File(new File(s), "data"), new File(new File(name), "data"));
+                     } catch (IOException exception) {
+                        MinecraftServer.field_147145_h.warn("Unable to migrate world data.");
+                     }
+                     MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder complete ----");
+                  } else {
+                     MinecraftServer.field_147145_h.warn("Could not move folder " + oldWorld + " to " + newWorld + "!");
+                     MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder failed ----");
+                  }
+               } else {
+                  MinecraftServer.field_147145_h.warn("Could not create path for " + newWorld + "!");
+                  MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder failed ----");
+               }
+            }
+            try {
+               worldSession = SaveFormat.func_237269_a_(server.getWorldContainer().toPath()).func_237274_c_(name, dimensionKey);
+            } catch (IOException ex) {
+               throw new RuntimeException(ex);
+            }
+            MinecraftServer.func_240777_a_(worldSession); // Run conversion now
+         }
+         org.bukkit.generator.ChunkGenerator gen = this.server.getGenerator(name);
+         DynamicRegistries.Impl iregistrycustom_dimension = this.field_240767_f_;
+         WorldSettingsImport<INBT> registryreadops = WorldSettingsImport.func_244335_a((DynamicOps) NBTDynamicOps.field_210820_a, this.field_195576_ac.func_240970_h_(), iregistrycustom_dimension);
+         worlddata = (ServerWorldInfo) worldSession.func_237284_a_((DynamicOps) registryreadops, datapackconfiguration);
+         if (worlddata == null) {
+            WorldSettings worldsettings;
+            DimensionGeneratorSettings generatorsettings;
+            if (this.func_71242_L()) {
+               worldsettings = MinecraftServer.field_213219_c;
+               generatorsettings = DimensionGeneratorSettings.func_242752_a((DynamicRegistries) iregistrycustom_dimension);
+            } else {
+               ServerProperties dedicatedserverproperties = ((DedicatedServer) this).func_213221_d_();
+               worldsettings = new WorldSettings(dedicatedserverproperties.field_219021_o, dedicatedserverproperties.field_219020_n, dedicatedserverproperties.field_218990_C, dedicatedserverproperties.field_219019_m, false, new GameRules(), datapackconfiguration);
+               generatorsettings = options.has("bonusChest") ? dedicatedserverproperties.field_241082_U_.func_236230_k_() : dedicatedserverproperties.field_241082_U_;
+            }
+            worlddata = new ServerWorldInfo(worldsettings, generatorsettings, Lifecycle.stable());
+         }
+         worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
+         if (options.has("forceUpgrade")) {
+            net.minecraft.server.Main.func_240761_a_(worldSession, DataFixesManager.func_210901_a(), options.has("eraseCache"), () -> {
+               return true;
+            }, worlddata.func_230418_z_().func_236224_e_().func_239659_c_().stream().map((entry) -> {
+               return RegistryKey.func_240903_a_(Registry.field_239699_ae_, ((RegistryKey) entry.getKey()).getRegistryName());
+            }).collect(ImmutableSet.toImmutableSet()));
+         }
+         IServerWorldInfo iworlddataserver = worlddata;
+         DimensionGeneratorSettings generatorsettings = worlddata.func_230418_z_();
+         boolean flag = generatorsettings.func_236227_h_();
+         long i = generatorsettings.func_236221_b_();
+         long j = BiomeManager.func_235200_a_(i);
+         List<ISpecialSpawner> list = ImmutableList.of(new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(iworlddataserver));
+         SimpleRegistry<Dimension> registrymaterials = generatorsettings.func_236224_e_();
+         Dimension worlddimension = (Dimension) registrymaterials.func_230516_a_(dimensionKey);
+         DimensionType dimensionmanager;
+         ChunkGenerator chunkgenerator;
+         if (worlddimension == null) {
+            dimensionmanager = (DimensionType) this.field_240767_f_.func_230520_a_().func_243576_d(DimensionType.field_235999_c_);
+            chunkgenerator = DimensionGeneratorSettings.func_242750_a(this.field_240767_f_.func_243612_b(Registry.field_239720_u_), this.field_240767_f_.func_243612_b(Registry.field_243549_ar), (new Random()).nextLong());
+         } else {
+            dimensionmanager = worlddimension.func_236063_b_();
+            chunkgenerator = worlddimension.func_236064_c_();
+         }
+         RegistryKey<World> worldKey = RegistryKey.func_240903_a_(Registry.field_239699_ae_, dimensionKey.func_240901_a_());
+         if (worldId == 0) {
+            this.field_240768_i_ = worlddata;
+            this.field_240768_i_.func_230392_a_(((DedicatedServer) this).func_213221_d_().field_219020_n); // From DedicatedServer.init
+            IChunkStatusListener worldloadlistener = this.field_213220_d.create(11);
+            world = new ServerWorld(this, this.field_213217_au, worldSession, iworlddataserver, worldKey, dimensionmanager, worldloadlistener, chunkgenerator, flag, j, list, true, org.bukkit.World.Environment.getEnvironment(dimension), gen);
+            DimensionSavedDataManager worldpersistentdata = world.func_217481_x();
+            this.func_213204_a(worldpersistentdata);
+            this.server.scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(this, world.func_96441_U());
+            this.field_229733_al_ = new CommandStorage(worldpersistentdata);
+         } else {
+            IChunkStatusListener worldloadlistener = this.field_213220_d.create(11);
+            world = new ServerWorld(this, this.field_213217_au, worldSession, iworlddataserver, worldKey, dimensionmanager, worldloadlistener, chunkgenerator, flag, j, ImmutableList.of(), true, org.bukkit.World.Environment.getEnvironment(dimension), gen);
+         }
+         worlddata.func_230412_a_(this.getServerModName(), this.func_230045_q_().isPresent());
+         this.initWorld(world, worlddata, field_240768_i_, worlddata.func_230418_z_());
+         this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getCBWorld()));
+         this.field_71305_c.put(world.func_234923_W_(), world);
+         this.func_184103_al().func_212504_a(world);
+         if (worlddata.func_230404_D_() != null) {
+            this.func_201300_aS().func_201381_a(worlddata.func_230404_D_());
+         }
+      }
       this.func_230543_p_();
-      this.func_213186_a(ichunkstatuslistener);
+      for (ServerWorld worldserver : this.func_212370_w()) {
+         this.loadInitialChunks(worldserver.func_72863_F().field_217237_a.field_219266_t, worldserver);
+         this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(worldserver.getCBWorld()));
+      }
+      this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
+      this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+      this.field_147144_o.acceptConnections();
+      // CraftBukkit end
    }
 
    protected void func_230543_p_() {
    }
 
-   protected void func_240787_a_(IChunkStatusListener p_240787_1_) {
-      IServerWorldInfo iserverworldinfo = this.field_240768_i_.func_230407_G_();
-      DimensionGeneratorSettings dimensiongeneratorsettings = this.field_240768_i_.func_230418_z_();
+   // CraftBukkit start 
+   public void initWorld(ServerWorld serverworld, ServerWorldInfo iserverworldinfo, IServerConfiguration saveData, DimensionGeneratorSettings dimensiongeneratorsettings) {
       boolean flag = dimensiongeneratorsettings.func_236227_h_();
-      long i = dimensiongeneratorsettings.func_236221_b_();
-      long j = BiomeManager.func_235200_a_(i);
-      List<ISpecialSpawner> list = ImmutableList.of(new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(iserverworldinfo));
-      SimpleRegistry<Dimension> simpleregistry = dimensiongeneratorsettings.func_236224_e_();
-      Dimension dimension = simpleregistry.func_230516_a_(Dimension.field_236053_b_);
-      ChunkGenerator chunkgenerator;
-      DimensionType dimensiontype;
-      if (dimension == null) {
-         dimensiontype = this.field_240767_f_.func_230520_a_().func_243576_d(DimensionType.field_235999_c_);
-         chunkgenerator = DimensionGeneratorSettings.func_242750_a(this.field_240767_f_.func_243612_b(Registry.field_239720_u_), this.field_240767_f_.func_243612_b(Registry.field_243549_ar), (new Random()).nextLong());
-      } else {
-         dimensiontype = dimension.func_236063_b_();
-         chunkgenerator = dimension.func_236064_c_();
+
+      // CraftBukkit start
+      if (serverworld.generator != null) {
+         serverworld.getCBWorld().getPopulators().addAll(serverworld.generator.getDefaultPopulators(serverworld.getCBWorld()));
       }
 
-      ServerWorld serverworld = new ServerWorld(this, this.field_213217_au, this.field_71310_m, iserverworldinfo, World.field_234918_g_, dimensiontype, p_240787_1_, chunkgenerator, flag, j, list, true);
-      this.field_71305_c.put(World.field_234918_g_, serverworld);
-      DimensionSavedDataManager dimensionsaveddatamanager = serverworld.func_217481_x();
-      this.func_213204_a(dimensionsaveddatamanager);
-      this.field_229733_al_ = new CommandStorage(dimensionsaveddatamanager);
       WorldBorder worldborder = serverworld.func_175723_af();
       worldborder.func_235926_a_(iserverworldinfo.func_230398_q_());
       if (!iserverworldinfo.func_76070_v()) {
@@ -356,26 +542,8 @@
 
          iserverworldinfo.func_76091_d(true);
       }
-
-      this.func_184103_al().func_212504_a(serverworld);
-      if (this.field_240768_i_.func_230404_D_() != null) {
-         this.func_201300_aS().func_201381_a(this.field_240768_i_.func_230404_D_());
-      }
-
-      for(Entry<RegistryKey<Dimension>, Dimension> entry : simpleregistry.func_239659_c_()) {
-         RegistryKey<Dimension> registrykey = entry.getKey();
-         if (registrykey != Dimension.field_236053_b_) {
-            RegistryKey<World> registrykey1 = RegistryKey.func_240903_a_(Registry.field_239699_ae_, registrykey.func_240901_a_());
-            DimensionType dimensiontype1 = entry.getValue().func_236063_b_();
-            ChunkGenerator chunkgenerator1 = entry.getValue().func_236064_c_();
-            DerivedWorldInfo derivedworldinfo = new DerivedWorldInfo(this.field_240768_i_, iserverworldinfo);
-            ServerWorld serverworld1 = new ServerWorld(this, this.field_213217_au, this.field_71310_m, derivedworldinfo, registrykey1, dimensiontype1, p_240787_1_, chunkgenerator1, flag, j, ImmutableList.of(), false);
-            worldborder.func_177737_a(new IBorderListener.Impl(serverworld1.func_175723_af()));
-            this.field_71305_c.put(registrykey1, serverworld1);
-         }
-      }
-
    }
+   // CraftBukkit end
 
    private static void func_240786_a_(ServerWorld p_240786_0_, IServerWorldInfo p_240786_1_, boolean p_240786_2_, boolean p_240786_3_, boolean p_240786_4_) {
       ChunkGenerator chunkgenerator = p_240786_0_.func_72863_F().func_201711_g();
@@ -384,12 +552,27 @@
       } else if (p_240786_3_) {
          p_240786_1_.func_176143_a(BlockPos.field_177992_a.func_177984_a(), 0.0F);
       } else {
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_240786_0_, p_240786_1_)) return;
          BiomeProvider biomeprovider = chunkgenerator.func_202090_b();
          Random random = new Random(p_240786_0_.func_72905_C());
          BlockPos blockpos = biomeprovider.func_225531_a_(0, p_240786_0_.func_181545_F(), 0, 256, (p_244265_0_) -> {
             return p_244265_0_.func_242433_b().func_242562_b();
          }, random);
          ChunkPos chunkpos = blockpos == null ? new ChunkPos(0, 0) : new ChunkPos(blockpos);
+         // CraftBukkit start
+         if (p_240786_0_.generator != null) {
+            Random rand = new Random(p_240786_0_.func_72905_C());
+            org.bukkit.Location spawn = p_240786_0_.generator.getFixedSpawnLocation(p_240786_0_.getCBWorld(), rand);
+            if (spawn != null) {
+               if (spawn.getWorld() != p_240786_0_.func_201672_e()) {
+                  throw new IllegalStateException("Cannot set spawn point for " + p_240786_1_.func_76065_j() + " to be in another world (" + spawn.getWorld().getName() + ")");
+               } else {
+                  p_240786_1_.func_176143_a(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()), spawn.getYaw());
+                  return;
+               }
+            }
+         }
+         // CraftBukkit end
          if (blockpos == null) {
             field_147145_h.warn("Unable to find spawn biome");
          }
@@ -448,8 +631,13 @@
       iserverworldinfo.func_230392_a_(GameType.SPECTATOR);
    }
 
-   private void func_213186_a(IChunkStatusListener p_213186_1_) {
-      ServerWorld serverworld = this.func_241755_D_();
+   // CraftBukkit start
+   public void loadInitialChunks(IChunkStatusListener p_213186_1_, ServerWorld serverworld) { // private->public CraftBukkit
+      if (!serverworld.getCBWorld().getKeepSpawnInMemory()) {
+         return;
+      }
+      this.forceTicks = true;
+      // CraftBukkit end
       field_147145_h.info("Preparing start region for dimension {}", (Object)serverworld.func_234923_W_().func_240901_a_());
       BlockPos blockpos = serverworld.func_241135_u_();
       p_213186_1_.func_219509_a(new ChunkPos(blockpos));
@@ -459,31 +647,39 @@
       serverchunkprovider.func_217228_a(TicketType.field_219488_a, new ChunkPos(blockpos), 11, Unit.INSTANCE);
 
       while(serverchunkprovider.func_217229_b() != 441) {
+         // CraftBukkit start
          this.field_211151_aa = Util.func_211177_b() + 10L;
-         this.func_213202_o();
+         this.executeModerately();
+         // CraftBukkit end
       }
 
-      this.field_211151_aa = Util.func_211177_b() + 10L;
-      this.func_213202_o();
+      // CraftBukkit start
+      // this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
+      this.executeModerately();
+      ServerWorld serverworld1 = serverworld;
+      ForcedChunksSaveData forcedchunkssavedata = (ForcedChunksSaveData) serverworld1.func_217481_x().func_215753_b(ForcedChunksSaveData::new, "chunks");
+      // CraftBukkit end
 
-      for(ServerWorld serverworld1 : this.field_71305_c.values()) {
-         ForcedChunksSaveData forcedchunkssavedata = serverworld1.func_217481_x().func_215753_b(ForcedChunksSaveData::new, "chunks");
-         if (forcedchunkssavedata != null) {
-            LongIterator longiterator = forcedchunkssavedata.func_212438_a().iterator();
+      if (forcedchunkssavedata != null) {
+         LongIterator longiterator = forcedchunkssavedata.func_212438_a().iterator();
 
-            while(longiterator.hasNext()) {
-               long i = longiterator.nextLong();
-               ChunkPos chunkpos = new ChunkPos(i);
-               serverworld1.func_72863_F().func_217206_a(chunkpos, true);
-            }
+         while (longiterator.hasNext()) {
+            long i = longiterator.nextLong();
+            ChunkPos chunkpos = new ChunkPos(i);
+            serverworld1.func_72863_F().func_217206_a(chunkpos, true);
          }
       }
 
-      this.field_211151_aa = Util.func_211177_b() + 10L;
-      this.func_213202_o();
+      // CraftBukkit start
+      //this.serverTime = Util.milliTime() + 10L;
+      this.executeModerately();
+      // CraftBukkit end
       p_213186_1_.func_219510_b();
       serverchunkprovider.func_212863_j_().func_215598_a(5);
       this.func_240794_aZ_();
+      // CraftBukkit start
+      this.forceTicks = false;
+      // CraftBukkit end
    }
 
    protected void func_175584_a() {
@@ -526,20 +722,45 @@
          flag = true;
       }
 
+      // CraftBukkit start - moved to ServerWorld.save
+      /*
       ServerWorld serverworld1 = this.func_241755_D_();
       IServerWorldInfo iserverworldinfo = this.field_240768_i_.func_230407_G_();
-      iserverworldinfo.func_230393_a_(serverworld1.func_175723_af().func_235927_t_());
-      this.field_240768_i_.func_230414_b_(this.func_201300_aS().func_201380_c());
-      this.field_71310_m.func_237288_a_(this.field_240767_f_, this.field_240768_i_, this.func_184103_al().func_72378_q());
-      return flag;
+      iserverworldinfo.func_230393_a_(serverworld1.getWorldBorder().func_235927_t_());
+      this.field_240768_i_.func_230414_b_(this.getCustomBossEvents().write());
+      this.anvilConverterForAnvilFile.func_237288_a_(this.field_240767_f_, this.field_240768_i_, this.getPlayerList().getHostPlayerData());
+       */
+      // CraftBukkit end
+       return flag;
    }
 
    public void close() {
       this.func_71260_j();
    }
 
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // CraftBukkit end
+
    protected void func_71260_j() {
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized(stopLock) {
+         if (hasStopped) return;
+         hasStopped = true;
+      }
+      // CraftBukkit end
       field_147145_h.info("Stopping server");
+      // CraftBukkit start
+      if (this.server != null) {
+         this.server.disablePlugins();
+      }
+      // CraftBukkit end
       if (this.func_147137_ag() != null) {
          this.func_147137_ag().func_151268_b();
       }
@@ -548,6 +769,7 @@
          field_147145_h.info("Saving players");
          this.field_71318_t.func_72389_g();
          this.field_71318_t.func_72392_r();
+         try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
       }
 
       field_147145_h.info("Saving worlds");
@@ -563,6 +785,7 @@
       for(ServerWorld serverworld1 : this.func_212370_w()) {
          if (serverworld1 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverworld1));
                serverworld1.close();
             } catch (IOException ioexception1) {
                field_147145_h.error("Exception closing the level", (Throwable)ioexception1);
@@ -611,6 +834,7 @@
    protected void func_240802_v_() {
       try {
          if (this.func_71197_b()) {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarted(this);
             this.field_211151_aa = Util.func_211177_b();
             this.field_147147_p.func_151315_a(new StringTextComponent(this.field_71286_C));
             this.field_147147_p.func_151321_a(new ServerStatusResponse.Version(SharedConstants.func_215069_a().getName(), SharedConstants.func_215069_a().getProtocolVersion()));
@@ -618,13 +842,15 @@
 
             while(this.field_71317_u) {
                long i = Util.func_211177_b() - this.field_211151_aa;
-               if (i > 2000L && this.field_211151_aa - this.field_71299_R >= 15000L) {
+               if (i > 5000L && this.field_211151_aa - this.field_71299_R >= 30000L) {  // CraftBukkit
                   long j = i / 50L;
+                  if (server.getWarnOnOverload()) // CraftBukkit
                   field_147145_h.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                   this.field_211151_aa += j * 50L;
                   this.field_71299_R = this.field_211151_aa;
                }
 
+               MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
                this.field_211151_aa += 50L;
                LongTickDetector longtickdetector = LongTickDetector.func_233524_a_("Server");
                this.func_240773_a_(longtickdetector);
@@ -640,7 +866,10 @@
                this.func_240795_b_(longtickdetector);
                this.field_71296_Q = true;
             }
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.func_71228_a((CrashReport)null);
          }
       } catch (Throwable throwable1) {
@@ -659,6 +888,7 @@
             field_147145_h.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.func_71228_a(crashreport);
       } finally {
          try {
@@ -667,6 +897,13 @@
          } catch (Throwable throwable) {
             field_147145_h.error("Exception stopping the server", throwable);
          } finally {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopped(this);
+            // CraftBukkit start - Restore terminal to original settings
+            try {
+               reader.getTerminal().restore();
+            } catch (Exception ignored) {
+            }
+            // CraftBukkit end
             this.func_71240_o();
          }
 
@@ -675,9 +912,16 @@
    }
 
    private boolean func_212379_aT() {
-      return this.func_213182_bg() || Util.func_211177_b() < (this.field_213214_ac ? this.field_213213_ab : this.field_211151_aa);
+      // CraftBukkit start
+      return this.forceTicks || this.func_213182_bg() || Util.func_211177_b() < (this.field_213214_ac ? this.field_213213_ab : this.field_211151_aa);
    }
 
+   private void executeModerately() {
+      this.func_213160_bf();
+      java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
+   }
+   // CraftBukkit end
+
    protected void func_213202_o() {
       this.func_213160_bf();
       this.func_213161_c(() -> {
@@ -685,7 +929,7 @@
       });
    }
 
-   protected TickDelayedTask func_212875_d_(Runnable p_212875_1_) {
+   public TickDelayedTask func_212875_d_(Runnable p_212875_1_) { // protected->public CraftBukkit
       return new TickDelayedTask(this.field_71315_w, p_212875_1_);
    }
 
@@ -768,6 +1012,7 @@
 
    protected void func_71217_p(BooleanSupplier p_71217_1_) {
       long i = Util.func_211178_c();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreServerTick();
       ++this.field_71315_w;
       this.func_71190_q(p_71217_1_);
       if (i - this.field_147142_T >= 5000000000L) {
@@ -782,9 +1027,10 @@
 
          Collections.shuffle(Arrays.asList(agameprofile));
          this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+         this.field_147147_p.invalidateJson();
       }
 
-      if (this.field_71315_w % 6000 == 0) {
+      if (autosavePeriod > 0 && this.field_71315_w % autosavePeriod == 0) { // CraftBukkit
          field_147145_h.debug("Autosave started");
          this.field_71304_b.func_76320_a("save");
          this.field_71318_t.func_72389_g();
@@ -809,24 +1055,43 @@
       long i1 = Util.func_211178_c();
       this.field_213215_ap.func_181747_a(i1 - i);
       this.field_71304_b.func_76319_b();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostServerTick();
    }
 
    protected void func_71190_q(BooleanSupplier p_71190_1_) {
+      this.server.getScheduler().mainThreadHeartbeat(this.field_71315_w); // CraftBukkit
       this.field_71304_b.func_76320_a("commandFunctions");
       this.func_193030_aL().func_73660_a();
       this.field_71304_b.func_219895_b("levels");
 
-      for(ServerWorld serverworld : this.func_212370_w()) {
+      // CraftBukkit start
+      // Run tasks that are waiting on processing
+      while (!processQueue.isEmpty()) {
+         processQueue.remove().run();
+      }
+      // Send time updates to everyone, it will get the right time from the world the player is in.
+      if (this.field_71315_w % 20 == 0) {
+         for (int i = 0; i < this.func_184103_al().field_72404_b.size(); ++i) {
+            ServerPlayerEntity entityplayer = (ServerPlayerEntity) this.func_184103_al().field_72404_b.get(i);
+            entityplayer.field_71135_a.func_147359_a(new SUpdateTimePacket(entityplayer.field_70170_p.func_82737_E(), entityplayer.getPlayerTime(), entityplayer.field_70170_p.func_82736_K().func_223586_b(GameRules.field_223607_j))); // Add support for per player time
+         }
+      }
+
+      for(ServerWorld serverworld : this.getWorldArray()) {
+         long tickStart = Util.func_211178_c();
          this.field_71304_b.func_194340_a(() -> {
             return serverworld + " " + serverworld.func_234923_W_().func_240901_a_();
          });
-         if (this.field_71315_w % 20 == 0) {
-            this.field_71304_b.func_76320_a("timeSync");
-            this.field_71318_t.func_232642_a_(new SUpdateTimePacket(serverworld.func_82737_E(), serverworld.func_72820_D(), serverworld.func_82736_K().func_223586_b(GameRules.field_223607_j)), serverworld.func_234923_W_());
-            this.field_71304_b.func_76319_b();
+         /* Drop global time updates
+         if (this.tickCounter % 20 == 0) {
+            this.profiler.startSection("timeSync");
+            this.playerList.func_232642_a_(new SUpdateTimePacket(serverworld.getGameTime(), serverworld.getDayTime(), serverworld.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)), serverworld.func_234923_W_());
+            this.profiler.endSection();
          }
+         // CraftBukkit end */
 
          this.field_71304_b.func_76320_a("tick");
+         net.minecraftforge.fml.hooks.BasicEventHooks.onPreWorldTick(serverworld);
 
          try {
             serverworld.func_72835_b(p_71190_1_);
@@ -835,9 +1100,11 @@
             serverworld.func_72914_a(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.minecraftforge.fml.hooks.BasicEventHooks.onPostWorldTick(serverworld);
 
          this.field_71304_b.func_76319_b();
          this.field_71304_b.func_76319_b();
+         perWorldTickTimes.computeIfAbsent(serverworld.func_234923_W_(), k -> new long[100])[this.field_71315_w % 100] = Util.func_211178_c() - tickStart;
       }
 
       this.field_71304_b.func_219895_b("connection");
@@ -912,7 +1179,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return server.getName(); // CraftBukkit - cb > vanilla!
    }
 
    public CrashReport func_71230_b(CrashReport p_71230_1_) {
@@ -925,6 +1192,7 @@
       p_71230_1_.func_85056_g().func_189529_a("Data Packs", () -> {
          StringBuilder stringbuilder = new StringBuilder();
 
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
          for(ResourcePackInfo resourcepackinfo : this.field_195577_ad.func_198980_d()) {
             if (stringbuilder.length() > 0) {
                stringbuilder.append(", ");
@@ -1264,6 +1532,7 @@
       }).thenAcceptAsync((p_240782_2_) -> {
          this.field_195576_ac.close();
          this.field_195576_ac = p_240782_2_;
+         this.server.syncCommands(); // SPIGOT-5884: Lost on reload
          this.field_195577_ad.func_198985_a(p_240780_1_);
          this.field_240768_i_.func_230410_a_(func_240771_a_(this.field_195577_ad));
          p_240782_2_.func_240971_i_();
@@ -1271,6 +1540,7 @@
          this.func_184103_al().func_193244_w();
          this.field_200258_al.func_240946_a_(this.field_195576_ac.func_240960_a_());
          this.field_240765_ak_.func_195410_a(this.field_195576_ac.func_240970_h_());
+         this.func_184103_al().func_181057_v().forEach(this.func_184103_al()::func_187243_f); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.func_213162_bc()) {
          this.func_213161_c(completablefuture::isDone);
@@ -1280,10 +1550,13 @@
    }
 
    public static DatapackCodec func_240772_a_(ResourcePackList p_240772_0_, DatapackCodec p_240772_1_, boolean p_240772_2_) {
+      net.minecraftforge.fml.packs.ResourcePackLoader.loadResourcePacks(p_240772_0_, net.minecraftforge.fml.server.ServerLifecycleHooks::buildPackFinder);
       p_240772_0_.func_198983_a();
+      DatapackCodec.field_234880_a_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_240772_1_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_240772_2_) {
-         p_240772_0_.func_198985_a(Collections.singleton("vanilla"));
-         return new DatapackCodec(ImmutableList.of("vanilla"), ImmutableList.of());
+         p_240772_0_.func_198985_a(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DatapackCodec(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1357,6 +1630,11 @@
       return true;
    }
 
+   @Override
+   public CommandSender getBukkitSender(CommandSource p0) {
+      return null;
+   }
+
    public RecipeManager func_199529_aN() {
       return this.field_195576_ac.func_240967_e_();
    }
@@ -1433,6 +1711,31 @@
 
    public abstract boolean func_213199_b(GameProfile p_213199_1_);
 
+   private Map<RegistryKey<World>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(RegistryKey<World> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<RegistryKey<World>, ServerWorld> forgeGetWorldMap() {
+      return this.field_71305_c;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerWorld[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerWorld[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.field_71305_c.values().stream().toArray(x -> new ServerWorld[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void func_223711_a(Path p_223711_1_) throws IOException {
       Path path = p_223711_1_.resolve("levels");
 
@@ -1561,7 +1864,28 @@
       return this.field_240768_i_;
    }
 
+   public DataPackRegistries getDataPackRegistries() {
+       return field_195576_ac;
+   }
+
    public DynamicRegistries func_244267_aX() {
       return this.field_240767_f_;
    }
+
+   // CraftBukkit start
+   @Override
+   public boolean func_213162_bc() {
+      return super.func_213162_bc() || this.func_71241_aa(); // CraftBukkit - MC-142590
+   }
+
+   public boolean isDebugging() {
+      return false;
+   }
+
+   @Deprecated
+   public static MinecraftServer getServer() {
+      return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+   }
+   // CraftBukkit end
+
 }
